"use strict";var ApplicationConfiguration=function(){var applicationModuleName="gaap-logic",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("comments"),ApplicationConfiguration.registerModule("core",["textAngular"]),ApplicationConfiguration.registerModule("issues"),ApplicationConfiguration.registerModule("pages"),ApplicationConfiguration.registerModule("projects"),ApplicationConfiguration.registerModule("questions"),ApplicationConfiguration.registerModule("responses",["textAngular"]),ApplicationConfiguration.registerModule("subjects"),ApplicationConfiguration.registerModule("users",["vcRecaptcha"]),ApplicationConfiguration.registerModule("versions"),angular.module("comments").run(["Menus",function(Menus){}]),angular.module("comments").config(["$stateProvider",function($stateProvider){$stateProvider.state("listComments",{url:"/comments",templateUrl:"modules/comments/views/list-comments.client.view.html"}).state("createComment",{url:"/comments/create",templateUrl:"modules/comments/views/create-comment.client.view.html"}).state("viewComment",{url:"/comments/:commentId",templateUrl:"modules/comments/views/view-comment.client.view.html"}).state("editComment",{url:"/comments/:commentId/edit",templateUrl:"modules/comments/views/edit-comment.client.view.html"})}]),angular.module("comments").controller("CommentsController",["$scope","$stateParams","$location","Authentication","Comments",function($scope,$stateParams,$location,Authentication,Comments){$scope.authentication=Authentication,$scope.create=function(){var comment=new Comments({title:this.title,content:this.content});comment.$save(function(response){$location.path("comments/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(comment){if(comment){comment.$remove();for(var i in $scope.comments)$scope.comments[i]===comment&&$scope.comments.splice(i,1)}else $scope.comment.$remove(function(){$location.path("comments")})},$scope.update=function(){var comment=$scope.comment;comment.$update(function(){$location.path("comments/"+comment._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.comments=Comments.query()},$scope.findOne=function(){$scope.comment=Comments.get({commentId:$stateParams.commentId})}}]),angular.module("comments").factory("Comments",["$resource",function($resource){return $resource("comments/:commentId",{commentId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.admin=!1,console.log($scope.authentication),angular.forEach($scope.authentication.user.roles,function(role,key){console.log(role),"admin"===role&&($scope.admin=!0)}),$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),console.log($scope.admin),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication","Subjects","$filter",function($scope,Authentication,Subjects,$filter){$scope.authentication=Authentication,angular.forEach($scope.authentication.user.roles,function(role,key){console.log(role),"admin"===role&&($scope.admin=!0)}),$scope.isCollapsed=!1;var orderBy=$filter("orderBy");$scope.order=function(array,predicate,reverse){var sorted=orderBy(array,predicate,reverse);return sorted},$scope.getSubjects=function(){var subjectsBetaObj=[],subjectsLiveObj=[],subjectsDevObj=[];Subjects.query(function(subjects){subjects=$scope.order(subjects,"-name",!0),angular.forEach(subjects,function(subject,key){"active"===subject.status&&(subject.prefix=subject.prefix.toLowerCase(),"beta"===subject.testStatus?subjectsBetaObj.push(subject):"live"===subject.testStatus?subjectsLiveObj.push(subject):subjectsDevObj.push(subject))}),$scope.subjectsLive=subjectsLiveObj,$scope.showLive=$scope.subjectsLive.length>0?!0:!1,$scope.subjectsBeta=subjectsBetaObj,$scope.showBeta=$scope.subjectsBeta.length>0?!0:!1,$scope.subjectsDev=subjectsDevObj,$scope.showDev=$scope.subjectsDev.length>0?!0:!1,console.log($scope.subjectsLive),console.log($scope.subjectsBeta),console.log($scope.subjectsDev)})},$scope.getLists=function(){$scope.getSubjects()}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("issues").run(["Menus",function(Menus){}]),angular.module("issues").config(["$stateProvider",function($stateProvider){$stateProvider.state("listIssues",{url:"/issues",templateUrl:"modules/issues/views/list-issues.client.view.html"}).state("createIssue",{url:"/issues/create",templateUrl:"modules/issues/views/create-issue.client.view.html"}).state("viewIssue",{url:"/issues/:issueId",templateUrl:"modules/issues/views/view-issue.client.view.html"}).state("editIssue",{url:"/issues/:issueId/edit",templateUrl:"modules/issues/views/edit-issue.client.view.html"})}]),angular.module("issues").controller("IssuesController",["$scope","$stateParams","$location","Authentication","Issues","$filter","Comments","Subjects",function($scope,$stateParams,$location,Authentication,Issues,$filter,Comments,Subjects){$scope.authentication=Authentication,angular.forEach($scope.authentication.user.roles,function(role,key){console.log(role),"admin"===role?$scope.admin=!0:$scope.admin=!1});var orderBy=$filter("orderBy");$scope.order=function(array,predicate,reverse){var sorted=orderBy(array,predicate,reverse);return sorted},$scope.create=function(){var issue=new Issues({title:this.title,type:this.type,nodeId:this.nodeId,subject:this.subject,content:this.content,permission:$scope.admin?"admin":"user",status:"open"});issue.$save(function(response){$location.path("issues"),$scope.title="",$scope.type="",$scope.nodeId="",$scope.subject="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createComment=function(){console.log($scope.issue._id);var comment=new Comments({title:$scope.issue.title,content:$scope.commentContent,issue:$scope.issue._id});comment.$save(function(response){console.log(response),window.location.reload(),$scope.commentContent=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(issue){if(issue){issue.$remove();for(var i in $scope.issues)$scope.issues[i]===issue&&$scope.issues.splice(i,1)}else $scope.issue.$remove(function(){$location.path("issues")})},$scope.update=function(){var issue=$scope.issue;issue.$update(function(){$location.path("issues")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){var issuesUser=[];Issues.query(function(issues){angular.forEach(issues,function(issue,key){"user"===issue.permission&&issuesUser.push(issue)}),$scope.issues=issues,console.log($scope.issues)})},$scope.findOne=function(){Issues.get({issueId:$stateParams.issueId}).$promise.then(function(issue){$scope.issue=issue,""===issue.shortId&&($scope.issue.shortId=$scope.issue._id.slice(-8),$scope.update()),$scope.showClosed=!1,"closed"===$scope.issue.status&&($scope.showClosed=!0),Comments.query(function(comments){var commentsObj=[];comments=$scope.order(comments,"-created",!0),angular.forEach(comments,function(comment,key){comment.issue===issue._id&&commentsObj.push(comment)}),$scope.comments=commentsObj,console.log($scope.comments)})})},$scope.close=function(){$scope.issue.status="closed",$scope.issue.closedBy=$scope.authentication.user.username,$scope.issue.closedDate=new Date,$scope.update()},$scope.open=function(){$scope.issue.status="open",$scope.update()},$scope.getComments=function(){Comments.query(function(comments){comments=$scope.order(comments,"-created",!0),$scope.comments=comments,console.log(comments)})},$scope.getSubjects=function(){var subjectsObj={};Subjects.query(function(subjects){subjects=$scope.order(subjects,"-name",!0),angular.forEach(subjects,function(subject,key){"active"===subject.status&&(subjectsObj[subject.name]=subject.subjectCode)}),$scope.subjects=subjectsObj,console.log($scope.subjects)})},$scope.getTypes=function(){var typesObj={};typesObj.Accounting="1",typesObj.Bug="2",typesObj.Support="3",typesObj.Other="4",typesObj.Enhancement="5",typesObj["Content - Summary"]="6",typesObj["Content - Question"]="7",typesObj["Content - ASC"]="8",typesObj["Content - Help"]="9",typesObj["Content - FAQ"]="10",typesObj["Content - Other"]="11",typesObj["Content - Accounting Recommendation"]="12",typesObj["Content - Intermediate Decision"]="13",$scope.types=typesObj,console.log($scope.types)},$scope.getLists=function(){$scope.getSubjects(),$scope.getTypes()},$scope.filter=function(filter){console.log(filter)}}]),angular.module("issues").factory("Issues",["$resource",function($resource){return $resource("issues/:issueId",{issueId:"@_id"},{update:{method:"PUT"}})}]),angular.module("pages").run(["Menus",function(Menus){}]),angular.module("pages").config(["$stateProvider",function($stateProvider){$stateProvider.state("listPages",{url:"/pages",templateUrl:"modules/pages/views/list-pages.client.view.html"}).state("createPage",{url:"/pages/create",templateUrl:"modules/pages/views/create-page.client.view.html"}).state("viewPage",{url:"/pages/:pageId",templateUrl:"modules/pages/views/view-page.client.view.html"}).state("editPage",{url:"/pages/:pageId/edit",templateUrl:"modules/pages/views/edit-page.client.view.html"})}]),angular.module("pages").controller("PagesController",["$scope","$stateParams","$location","Authentication","Pages",function($scope,$stateParams,$location,Authentication,Pages){$scope.authentication=Authentication,$scope.create=function(){var page=new Pages({title:this.title,content:this.content,url:this.url});page.$save(function(response){$location.path("pages/"+page.url),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(page){if(page){page.$remove();for(var i in $scope.pages)$scope.pages[i]===page&&$scope.pages.splice(i,1)}else $scope.page.$remove(function(){$location.path("pages")})},$scope.update=function(){console.log($scope.page);var page=$scope.page;page.$update(function(){$location.path("pages/"+page.url)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.pages=Pages.query()},$scope.findOne=function(){console.log($stateParams.pageId),Pages.get({pageId:$stateParams.pageId}).$promise.then(function(page){console.log(page),$scope.page=page})}}]),angular.module("pages").factory("Pages",["$resource",function($resource){return $resource("pages/:pageId",{pageId:"@url"},{update:{method:"PUT"}})}]),angular.module("projects").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Projects","projects","dropdown","/projects(/create)?"),Menus.addSubMenuItem("topbar","projects","List Projects","projects"),Menus.addSubMenuItem("topbar","projects","New Project","projects/create")}]),angular.module("projects").config(["$stateProvider",function($stateProvider){$stateProvider.state("listProjects",{url:"/projects",templateUrl:"modules/projects/views/list-projects.client.view.html"}).state("createProject",{url:"/projects/create",templateUrl:"modules/projects/views/create-project.client.view.html"}).state("viewProject",{url:"/projects/:projectId",templateUrl:"modules/projects/views/view-project.client.view.html"}).state("editProject",{url:"/projects/:projectId/edit",templateUrl:"modules/projects/views/edit-project.client.view.html"})}]),angular.module("projects").controller("ProjectsController",["$scope","$stateParams","$location","$filter","Authentication","Projects","Responses","Subjects","Versions",function($scope,$stateParams,$location,$filter,Authentication,Projects,Responses,Subjects,Versions){$scope.authentication=Authentication,console.log($scope.authentication),angular.forEach($scope.authentication.user.roles,function(role,key){console.log(role),"admin"===role?$scope.admin=!0:$scope.admin=!1});var orderBy=$filter("orderBy");$scope.order=function(array,predicate,reverse){var sorted=orderBy(array,predicate,reverse);return sorted},$scope.getVersions=function(){Versions.query(function(versions){versions=$scope.order(versions,"-description",!0),$scope.versions=versions})},$scope.getSubjects=function(){Subjects.query(function(subjects){subjects=$scope.order(subjects,"-name",!0);var subjectsObj=[];angular.forEach(subjects,function(subject,key){"active"!==subject.status||"live"!==subject.testStatus&&"beta"!==subject.testStatus||("beta"===subject.testStatus&&(subject.name=subject.name+=" (beta)"),subjectsObj.push(subject))}),$scope.subjects=subjectsObj,console.log($scope.subjects)})},$scope.getLists=function(){$scope.getVersions(),$scope.getSubjects(),$scope.showVersions=!1,$scope.showFilteredVersions=!1,$scope.showDescription=!1},$scope.filterVersions=function(){console.log($scope.subjects),console.log($scope.versions);var subject="undefined"!=typeof $scope.project?$scope.project.subject:$scope.subject,versions=[];angular.forEach($scope.versions,function(version,key){subject.subjectCode===version.subject&&versions.push(version)}),$scope.subjectVersions=versions,$scope.showFilteredVersions=!0,console.log(subject),$scope.subject=subject,$scope.showDescription=""!==subject.description?!0:!1},$scope.types=[{typeCode:"1",typeShort:"elt",typeLong:"Equity-Linked Transactions",typeStartNode:"1"},{typeCode:"2",typeShort:"vie",typeLong:"Variable Interest Entity Consolidation Model",typeStartNode:"301"},{typeCode:"3",typeShort:"revrec",typeLong:"Revenue Recognition",typeStartNode:""},{typeCode:"4",typeShort:"der",typeLong:"Freestanding Derivatives",typeStartNode:"1001"},{typeCode:"4",typeShort:"fcdr",typeLong:"Forward Commitment Dollar Roll",typeStartNode:"1002"}],console.log($scope.types),console.log($scope.types[1].typeCode),$scope.create=function(){var project=new Projects({title:this.title,entity:this.entity,description:this.description,subject:$scope.subject,version:$scope.version});project.$save(function(response){$location.path("responses/create/"+response._id),$scope.title="",$scope.entity="",$scope.description=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(project){if(project){Responses.query(function(responses){angular.forEach(responses,function(response,key){response.projectId===project._id&&response.$remove()})}),project.$remove();for(var i in $scope.projects)$scope.projects[i]===project&&$scope.projects.splice(i,1)}else Responses.query(function(responses){angular.forEach(responses,function(response,key){response.projectId===$scope.project._id&&response.$remove()})}).$promise.then(function(){$scope.project.$remove(function(){$location.path("projects")})})},$scope.update=function(){var project=$scope.project;console.log($scope.version),"undefined"!=typeof $scope.version&&(project.version=$scope.version),project.$update(function(){$location.path("projects/"+project._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){console.log($scope.admin),$scope.admin?$scope.projects=Projects.query():($scope.projects=[],Projects.query(function(projects){console.log(projects),angular.forEach(projects,function(project,key){console.log(project),project.user._id===$scope.authentication.user._id&&$scope.projects.push(project)})}))},$scope.findOne=function(){Projects.get({projectId:$stateParams.projectId}).$promise.then(function(project){$scope.showVersions=!1,$scope.project=project,$scope.getLists()})}}]),angular.module("projects").factory("Projects",["$resource",function($resource){return $resource("projects/:projectId",{projectId:"@_id"},{update:{method:"PUT"}})}]),angular.module("questions").run(["Menus",function(Menus){}]),angular.module("questions").config(["$stateProvider",function($stateProvider){$stateProvider.state("listQuestions",{url:"/questions",templateUrl:"modules/questions/views/list-questions.client.view.html"}).state("createQuestion",{url:"/questions/create",templateUrl:"modules/questions/views/create-question.client.view.html"}).state("viewQuestion",{url:"/questions/:questionId",templateUrl:"modules/questions/views/view-question.client.view.html"}).state("editQuestion",{url:"/questions/:questionId/edit",templateUrl:"modules/questions/views/edit-question.client.view.html"})}]),angular.module("questions").controller("QuestionsController",["$scope","$stateParams","$location","$filter","Authentication","Questions","$templateCache","Subjects","Issues","Versions",function($scope,$stateParams,$location,$filter,Authentication,Questions,$templateCache,Subjects,Issues,Versions){$scope.authentication=Authentication;var orderBy=$filter("orderBy");$scope.order=function(array,predicate,reverse){var sorted=orderBy(array,predicate,reverse);return sorted},$scope.admin=!1,angular.forEach($scope.authentication.user.roles,function(role,key){console.log(role),"admin"===role&&($scope.admin=!0)}),$scope.changeCreate=function(){console.log($scope.type);switch($scope.type){case"q":$scope.template=$scope.templates[0];break;case"d":$scope.template=$scope.templates[1];break;case"r":$scope.template=$scope.templates[2];break;case"i":$scope.template=$scope.templates[7];break;default:$scope.template=$scope.templates[0]}console.log($scope.template)},$scope.changeEdit=function(){console.log($scope.question.type);switch($scope.question.type){case"q":$scope.template=$scope.templates[3];break;case"d":$scope.template=$scope.templates[4];break;case"r":$scope.template=$scope.templates[5];break;case"i":$scope.template=$scope.templates[8];break;default:$scope.template=$scope.templates[3]}console.log($scope.template)},$scope.getVersions=function(){Versions.query(function(versions){versions=$scope.order(versions,"-description",!0),$scope.versions=versions})},$scope.getSubjects=function(){var subjectsObj={};Subjects.query(function(subjects){subjects=$scope.order(subjects,"-name",!0),angular.forEach(subjects,function(subject,key){"active"===subject.status&&(subjectsObj[subject.name]=subject.subjectCode)}),$scope.subjects=subjectsObj,console.log($scope.subjects)})},$scope.getLists=function(){$scope.getVersions(),$scope.getSubjects(),$scope.showVersions=!1},$scope.filterVersions=function(){console.log($scope.subjects),console.log($scope.versions);var subject="undefined"!=typeof $scope.question?$scope.question.subject:$scope.subject;"undefined"!=typeof $scope.question&&($scope.question.firstVersion="",$scope.question.lastVersion=""),console.log(subject);var versions={};angular.forEach($scope.versions,function(version,key){subject===version.subject&&(versions[version.description]=version.versionId)}),$scope.subjectVersions=versions,console.log($scope.subjectVersions),$scope.showVersions=!0},$scope.templates=[{name:"create-question_template.html",url:"modules/questions/views/create-question_template.html"},{name:"create-decision_template.html",url:"modules/questions/views/create-decision_template.html"},{name:"create-recommendation_template.html",url:"modules/questions/views/create-recommendation_template.html"},{name:"edit-question_template.html",url:"modules/questions/views/edit-question_template.html"},{name:"edit-decision_template.html",url:"modules/questions/views/edit-decision_template.html"},{name:"edit-recommendation_template.html",url:"modules/questions/views/edit-recommendation_template.html"},{name:"create-info_template.html",url:"modules/questions/views/create-info_template.html"},{name:"edit-info_template.html",url:"modules/questions/views/edit-info_template.html"}],$templateCache.get("modules/questions/views/create-question_template.html"),$templateCache.get("modules/questions/views/create-decision_template.html"),$templateCache.get("modules/questions/views/create-recommendation_template.html"),$templateCache.get("modules/questions/views/edit-question_template.html"),$templateCache.get("modules/questions/views/edit-decision_template.html"),$templateCache.get("modules/questions/views/edit-recommendation_template.html"),$templateCache.get("modules/questions/views/create-info_template.html"),$templateCache.get("modules/questions/views/edit-info_template.html"),$scope.create=function(question){console.log(question),console.log(question.question),console.log($scope.type);var newQuestion=new Questions({questionId:question.questionId,question:question.question,summary:question.summary,reportSummary:question.reportSummary,type:$scope.type,subject:$scope.subject,help:question.help,faq:question.faq,asc:question.asc,examples:question.examples,response_1:"r"===$scope.type?"":question.response_1,response_2:"r"===$scope.type?"":question.response_2,response_3:"r"===$scope.type?"":question.response_3,target_1:"r"===$scope.type?"":question.target_1,target_2:"r"===$scope.type?"":question.target_2,target_3:"r"===$scope.type?"":question.target_3,conclusion_1:"d"===$scope.type?question.conclusion_1:"",conclusion_2:"d"===$scope.type?question.conclusion_2:"",conclusion_3:"d"===$scope.type?question.conclusion_3:"",failResponse:question.failResponse,decisionNodeId:question.decisionNode});newQuestion.$save(function(response){$location.path("questions")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(question){if(question){question.$remove();for(var i in $scope.questions)$scope.questions[i]===question&&$scope.questions.splice(i,1)}else $scope.question.$remove(function(){$location.path("questions")})},$scope.update=function(){var question=$scope.question;console.log(question),question.conclusion_1="d"===question.type?question.conclusion_1:"",question.conclusion_2="d"===question.type?question.conclusion_2:"",question.conclusion_3="d"===question.type?question.conclusion_3:"",question.$update(function(){$location.path("questions")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){Questions.query(function(questions){$scope.questions=$scope.order(questions,"-sort",!0),$scope.all=!0})},$scope.findOne=function(){Questions.get({questionId:$stateParams.questionId}).$promise.then(function(question){switch($scope.question=question,console.log(question),$scope.getLists(),$scope.question.type){case"q":$scope.template=$scope.templates[3];break;case"d":$scope.template=$scope.templates[4];break;case"r":$scope.template=$scope.templates[5];break;case"i":$scope.template=$scope.templates[8];break;default:$scope.template=$scope.templates[3]}}).then(function(){var issuesObj=[];Issues.query(function(issues){issues=$scope.order(issues,"-sort",!0);angular.forEach(issues,function(issue,key){console.log(issue.nodeId),console.log($scope.question.questionId),issue.nodeId===$scope.question.questionId&&issuesObj.push(issue)}),$scope.issues=issuesObj,console.log($scope.issues),$scope.showIssues=$scope.issues.length&&$scope.admin>0?!0:!1})})},$scope.searchOne=function(){console.log($scope.nodeId),angular.forEach($scope.questions,function(question,key){question.questionId===$scope.nodeId&&$location.path("questions/"+question._id)})},$scope.filterList=function(){Questions.query(function(questions){var questionList=[];"all"===$scope.projectType?questionList=questions:angular.forEach(questions,function(question,key){question.subject===$scope.projectType&&questionList.push(question)}),$scope.questions=$scope.order(questionList,"-questionId",!0)})},$scope.assignType=function(){Questions.query(function(questions){var count=0;angular.forEach(questions,function(question,key){""===question.projectType&&(Number(question.questionId)<=150?(question.projectType="1",question.$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message}),count++):Number(question.questionId)<=500&&(question.projectType="2",question.$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message}),count++))})})},$scope.cleanCollection=function(){var count=0,max=1;Questions.query(function(questions){angular.forEach(questions,function(question,key){if(console.log(question.target_1),max>count&&"undefined"!=typeof question.target_1){var newQuestion=new Questions({questionId:question.questionId,question:question.question,summary:question.summary,reportSummary:question.reportSummary,type:question.type,subject:question.projectType,help:question.help,faq:question.faq,asc:question.asc,examples:question.examples,conclusion_1:question.conclusion_1,conclusion_2:question.conclusion_2,conclusion_3:question.conclusion_3});console.log(newQuestion),console.log(question),newQuestion.$save(function(response){$scope.remove(question)},function(errorResponse){$scope.error=errorResponse.data.message}),count++}})})}}]),angular.module("questions").factory("Questions",["$resource",function($resource){return $resource("questions/:questionId",{questionId:"@_id"},{update:{method:"PUT"}})}]),angular.module("responses").run(["Menus",function(Menus){}]),angular.module("responses").config(["$stateProvider",function($stateProvider){$stateProvider.state("createPreferenceResponse",{url:"/responses/create/preference/:projectId",templateUrl:"modules/responses/views/create-preference-response.client.view.html",controller:["$stateParams",function($stateParams){$stateParams.projectId}]}).state("createBinaryResponse",{url:"/responses/create/:projectId",templateUrl:"modules/responses/views/create-response.client.view.html",controller:["$stateParams",function($stateParams){$stateParams.projectId}]}).state("listResponses",{url:"/responses/:projectId",templateUrl:"modules/responses/views/list-responses.client.view.html"}).state("reportRequirementResponses",{url:"/responses/report/:projectId",templateUrl:"modules/responses/views/report-response.client.view.html"})}]),angular.module("responses").controller("ResponsesController",["$scope","$stateParams","$location","$filter","$modal","$log","Authentication","Responses","Questions","Projects","$templateCache","$compile","$window","$element","Versions",function($scope,$stateParams,$location,$filter,$modal,$log,Authentication,Responses,Questions,Projects,$templateCache,$compile,$window,$element,Versions){$scope.authentication=Authentication;var orderBy=$filter("orderBy");$scope.order=function(array,predicate,reverse){var sorted=orderBy(array,predicate,reverse);return sorted},$scope.templates=[{name:"question_template.html",url:"modules/responses/views/question_template.html"},{name:"decision_template.html",url:"modules/responses/views/decision_template.html"},{name:"recommendation_template.html",url:"modules/responses/views/recommendation_template.html"},{name:"info_template.html",url:"modules/responses/views/info_template.html"}],$templateCache.get("modules/responses/views/question_template.html"),$templateCache.get("modules/responses/views/decision_template.html"),$templateCache.get("modules/responses/views/recommendation_template.html"),$templateCache.get("modules/responses/views/info_template.html"),$scope.getQuestions=function(){$scope.projectId=$stateParams.projectId,Projects.get({projectId:$stateParams.projectId}).$promise.then(function(project){console.log(project),$scope.project=project,Versions.get({versionId:$scope.project.version._id}).$promise.then(function(version){$scope.versionJson=version.versionJson,console.log(version),$scope.version=version,Responses.query(function(responses){$scope.responses=$scope.order(responses,"-questionId",!0)}).$promise.then(function(){var nodes=[];if(angular.forEach($scope.responses,function(value,key){value.projectId===$scope.projectId&&nodes.push(value)}),$scope.nodes=$scope.order(nodes,"-sequence",!0),$scope.count=0,$scope.breadcrumbs=[],$scope.conclusions=[],$scope.sequence=1,$scope.nodes.length>0)$scope.existingNodes();else{$scope.template=$scope.templates[3],console.log($scope.versionJson[0]),$scope.current=$scope.sequence,Questions.get({questionId:$scope.versionJson[0].nodeId}).$promise.then(function(content){console.log(content),$scope.content=content,$scope.showContinueButton=!0,$scope.addJson($scope.versionJson[0].nodeId),$scope.questionId=$scope.content.questionId,$scope.resetShows();var breadcrumb={};breadcrumb.sequence=$scope.sequence,breadcrumb.questionId=$scope.content.questionId,breadcrumb.question=$scope.content.question,
breadcrumb.summary=$scope.content.summary,breadcrumb.type=$scope.content.type,$scope.breadcrumbs.push(breadcrumb)})}})})})},$scope.addJson=function(nodeId){console.log(nodeId),console.log(typeof nodeId),angular.forEach($scope.versionJson,function(json,key){json.nodeId===nodeId&&(console.log(nodeId),$scope.currentJson=json,$scope.content.response_1=$scope.currentJson.response_1,$scope.content.response_2=$scope.currentJson.response_2,$scope.content.response_3=$scope.currentJson.response_3,$scope.content.target_1=$scope.currentJson.target_1,$scope.content.target_2=$scope.currentJson.target_2,$scope.content.target_3=$scope.currentJson.target_3)})},$scope.nextQuestion=function(response){switch(console.log(response),response){case"1":$scope.response={response:"response_1",target:"target_1",conclusion:"conclusion_1",comment:$scope.content.comment};break;case"2":$scope.response={response:"response_2",target:"target_2",conclusion:"conclusion_2",comment:$scope.content.comment};break;case"3":$scope.response={response:"response_3",target:"target_3",conclusion:"conclusion_3",comment:$scope.content.comment};break;default:$scope.response=""}var priorAnswer,lastTarget,thisBreadcrumb;if(angular.forEach($scope.breadcrumbs,function(breadcrumb,key){breadcrumb.sequence===$scope.current&&"undefined"!=typeof breadcrumb.answer&&(priorAnswer=breadcrumb.answer.response.slice(-1),thisBreadcrumb=breadcrumb),"undefined"!=typeof breadcrumb.answer&&(lastTarget=breadcrumb.answer.targetValue)}),console.log($scope.current),console.log(priorAnswer),console.log(thisBreadcrumb),console.log(lastTarget),console.log($scope.content),"undefined"!=typeof priorAnswer&&priorAnswer!==response){thisBreadcrumb.comment=$scope.content.comment,thisBreadcrumb.saved.comment=$scope.content.comment;var currentAnswer={questionId:$scope.content.questionId,question:$scope.content.question,summary:$scope.content.summary,comment:$scope.content.comment,response:$scope.response.response,responseValue:$scope.content[$scope.response.response],target:$scope.response.target,targetValue:$scope.content[$scope.response.target],conclusion:$scope.response.conclusion,conclusionValue:$scope.content[$scope.response.conclusion]};thisBreadcrumb.answer=currentAnswer,thisBreadcrumb.saved.answer=currentAnswer,$scope.dropNodes(thisBreadcrumb),$scope.update(thisBreadcrumb),$scope.showReportButton=!1}else"undefined"!=typeof priorAnswer&&priorAnswer===response?(thisBreadcrumb.comment=$scope.content.comment,thisBreadcrumb.saved.comment=$scope.content.comment,thisBreadcrumb.saved.answer.comment=$scope.content.comment,$scope.update(thisBreadcrumb),$scope.content.response=!1,$scope.currentJson=$scope.project.version.versionJson[0],Questions.get({questionId:lastTarget}).$promise.then(function(content){$scope.content=content,$scope.addJson(lastTarget),$scope.current=$scope.sequence})):($scope.saveNode(response),$scope.newNode(response))},$scope.dropNodes=function(thisBreadcrumb){console.log($scope.breadcrumbs),console.log($scope.current);var number=0;angular.forEach($scope.breadcrumbs,function(breadcrumb,key){breadcrumb.sequence>$scope.current&&(console.log(breadcrumb.sequence),$scope.remove($scope.breadcrumbs[key].saved),number++)});var start=-1*number;$scope.breadcrumbs.splice(start,number),$scope.sequence=$scope.current,$scope.newNode(thisBreadcrumb.answer.targetValue)},$scope.saveNode=function(response){console.log($scope.content);var currentAnswer={questionId:$scope.content.questionId,question:$scope.content.question,summary:$scope.content.summary,comment:$scope.content.comment,response:$scope.response.response,responseValue:$scope.content[$scope.response.response],target:$scope.response.target,targetValue:$scope.content[$scope.response.target],conclusion:$scope.response.conclusion,conclusionValue:$scope.content[$scope.response.conclusion]},response=new Responses({projectId:$scope.projectId,type:$scope.content.type,question:$scope.content.question,questionId:$scope.content.questionId,answer:currentAnswer,sequence:Number($scope.sequence),comment:$scope.content.comment,conclusion:$scope.content[$scope.response.conclusion]});response.$save(function(response){console.log(response);var breadcrumb={};breadcrumb.saved=response,console.log(breadcrumb),breadcrumb.sequence=$scope.sequence,breadcrumb.questionId=$scope.content.questionId,breadcrumb.question=$scope.content.question,breadcrumb.summary=$scope.content.summary,breadcrumb.comment="undefined"!=typeof $scope.content.comment?$scope.content.comment:"",breadcrumb.type=$scope.content.type,breadcrumb.answer=currentAnswer,$scope.breadcrumbs.pop(),$scope.breadcrumbs.push(breadcrumb)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.newNode=function(response){if("undefined"!=typeof response){console.log(response);var target=$scope.content[$scope.response.target];console.log(target),console.log($scope.breadcrumbs);var breadcrumb={};Questions.get({questionId:target}).$promise.then(function(content){console.log(content),$scope.content=content,console.log($scope.content),$scope.addJson(target),"q"===$scope.content.type?($scope.template=$scope.templates[0],console.log($scope.breadcrumbs),$scope.sequence++,console.log($scope.sequence),$scope.current=$scope.sequence,$scope.content.response=!1,breadcrumb.sequence=$scope.sequence,breadcrumb.questionId=$scope.content.questionId,breadcrumb.question=$scope.content.question,breadcrumb.summary=$scope.content.summary,breadcrumb.type=$scope.content.type,$scope.breadcrumbs.push(breadcrumb),console.log($scope.breadcrumbs),$scope.resetShows()):"r"===$scope.content.type?($scope.template=$scope.templates[2],console.log($scope.breadcrumbs),$scope.sequence++,$scope.current=$scope.sequence,$scope.content.response=!1,$scope.showReportButton=!0,breadcrumb.sequence=$scope.sequence,breadcrumb.questionId=$scope.content.questionId,breadcrumb.question=$scope.content.question,breadcrumb.summary=$scope.content.summary,breadcrumb.type=$scope.content.type,$scope.breadcrumbs.push(breadcrumb),console.log($scope.breadcrumbs),$scope.resetShows()):"i"===$scope.content.type?($scope.template=$scope.templates[3],console.log($scope.breadcrumbs),$scope.sequence++,$scope.current=$scope.sequence,$scope.content.response=!1,$scope.showReportButton=!0,breadcrumb.sequence=$scope.sequence,breadcrumb.questionId=$scope.content.questionId,breadcrumb.question=$scope.content.question,breadcrumb.summary=$scope.content.summary,breadcrumb.type=$scope.content.type,$scope.breadcrumbs.push(breadcrumb),console.log($scope.breadcrumbs),$scope.resetShows()):"d"===$scope.content.type&&($scope.template=$scope.templates[1],$scope.sequence++,$scope.current=$scope.sequence,$scope.content.response=!1,$scope.decisionNode(target))})}},$scope.existingNodes=function(){var response,target;console.log($scope.nodes),angular.forEach($scope.nodes,function(node,key){console.log(node.sequence),$scope.breadcrumbs.push({saved:node,sequence:Number(node.sequence),questionId:node.questionId,question:node.question,type:node.type,summary:node.answer.summary,comment:node.comment,answer:{questionId:node.answer.questionId,question:node.answer.question,response:node.answer.response,responseValue:node.answer.responseValue,target:node.answer.target,targetValue:node.answer.targetValue,conclusion:node.answer.conclusion,conclusionValue:node.answer.conclusionValue,comment:node.comment}}),"d"===node.type&&$scope.conclusions.push(node.conclusion),target=node.answer.targetValue,response=node.answer.response,$scope.sequence=node.sequence}),$scope.breadcrumbs=$scope.order($scope.breadcrumbs,"-sequence",!0),console.log($scope.breadcrumbs),console.log($scope.conclusions),console.log(target);var len=$scope.breadcrumbs.length,lastCrumb=$scope.breadcrumbs[len-1];if(console.log(lastCrumb),"r"===lastCrumb.type)$scope.content=lastCrumb,$scope.template=$scope.templates[2],$scope.sequence=Number(lastCrumb.sequence),$scope.current=$scope.sequence,$scope.content.response=!1,$scope.showReportButton=!0,$scope.resetShows();else{var breadcrumb={};Questions.get({questionId:target}).$promise.then(function(content){$scope.content=content,$scope.addJson(target),"q"===$scope.content.type?($scope.template=$scope.templates[0],$scope.sequence=Number(lastCrumb.sequence)+1,$scope.current=$scope.sequence,$scope.content.response=!1,breadcrumb={},breadcrumb.sequence=$scope.sequence,breadcrumb.questionId=$scope.content.questionId,breadcrumb.question=$scope.content.question,breadcrumb.summary=$scope.content.summary,breadcrumb.type=$scope.content.type,$scope.breadcrumbs.push(breadcrumb),$scope.resetShows()):"r"===$scope.content.type?($scope.template=$scope.templates[2],$scope.sequence=Number(lastCrumb.sequence)+1,$scope.current=$scope.sequence,$scope.content.response=!1,$scope.showReportButton=!0,breadcrumb={},breadcrumb.sequence=$scope.sequence,breadcrumb.questionId=$scope.content.questionId,breadcrumb.question=$scope.content.question,breadcrumb.summary=$scope.content.summary,breadcrumb.type=$scope.content.type,$scope.breadcrumbs.push(breadcrumb),$scope.resetShows()):"i"===$scope.content.type?($scope.template=$scope.templates[3],$scope.sequence=Number(lastCrumb.sequence)+1,$scope.current=$scope.sequence,$scope.content.response=!1,breadcrumb={},breadcrumb.sequence=$scope.sequence,breadcrumb.questionId=$scope.content.questionId,breadcrumb.question=$scope.content.question,breadcrumb.summary=$scope.content.summary,breadcrumb.type=$scope.content.type,$scope.breadcrumbs.push(breadcrumb),$scope.resetShows()):"d"===$scope.content.type&&($scope.template=$scope.templates[1],$scope.sequence=Number(lastCrumb.sequence)+1,$scope.current=$scope.sequence,$scope.content.response=!1,$scope.decisionNode(target),$scope.resetShows())})}},$scope.resetShows=function(){$scope.content.show_1=""===$scope.content.response_1?!1:!0,$scope.content.show_2=""===$scope.content.response_2?!1:!0,$scope.content.show_3=""===$scope.content.response_3?!1:!0,$scope.content.showSummary=""===$scope.content.summary?!1:!0,$scope.content.showHelp=""===$scope.content.help?!1:!0,$scope.content.showFaq=""===$scope.content.faq?!1:!0,$scope.content.showAsc=""===$scope.content.asc?!1:!0,$scope.content.showExamples=""===$scope.content.examples?!1:!0,$scope.content.showInfo=$scope.content.showHelp||$scope.content.showFaq||$scope.content.showAsc||$scope.content.showExamples?!0:!1},$scope.showNode=function(sequence){$scope.content.response=!1,console.log(sequence),console.log($scope.breadcrumbs),console.log($scope.breadcrumbs[sequence-1]),console.log($scope.breadcrumbs[sequence-1].questionId),Questions.get({questionId:$scope.breadcrumbs[sequence-1].questionId}).$promise.then(function(content){switch($scope.content=content,$scope.content.comment=$scope.breadcrumbs[sequence-1].comment,$scope.addJson($scope.content.questionId),console.log($scope.breadcrumbs[sequence-1]),console.log($scope.content),$scope.breadcrumbs[sequence-1].type){case"q":$scope.template=$scope.templates[0];break;case"d":$scope.template=$scope.templates[1];break;case"r":$scope.template=$scope.templates[2];break;case"i":$scope.template=$scope.templates[3];break;default:$scope.template=$scope.templates[0]}if($scope.resetShows(),"undefined"!=typeof $scope.breadcrumbs[sequence-1].answer)switch($scope.breadcrumbs[sequence-1].answer.response){case"response_1":$scope.content.response="1";break;case"response_2":$scope.content.response="2";break;case"response_3":$scope.content.response="3";break;default:$scope.content.response=""}$scope.current=sequence})},$scope.getRequirementsResponseList=function(){Responses.query(function(responses){var array=[];$scope.requirementId=$stateParams.requirementId,angular.forEach(responses,function(value,key){value.requirementId===$scope.requirementId&&array.push(value)}),$scope.responses=array})},$scope.showText=function(event){var ele=angular.element(event.target);$scope.content.text=$scope.content[ele[0].id],$scope.content.showText=!0},$scope.remove=function(response){response&&response.$remove()},$scope.decisionNode=function(target){var nextAnswer,pass=!0;console.log(target),console.log($scope.breadcrumbs);var conclusion,fails={};Questions.get({questionId:target}).$promise.then(function(content){$scope.content=content,$scope.addJson(target),Questions.query(function(questions){angular.forEach(questions,function(value,key){value.decisionNodeId===target&&(fails[value.questionId]=value.failResponse)}),console.log(fails),angular.forEach($scope.breadcrumbs,function(breadcrumb,b){angular.forEach(fails,function(failResponse,failId){console.log(pass),pass===!0&&breadcrumb.questionId===failId&&breadcrumb.answer.responseValue===failResponse&&(pass=!1)})}),console.log(pass),console.log($scope.content),conclusion=pass?$scope.content.conclusion_1:$scope.content.conclusion_2,console.log(conclusion),$scope.conclusion=conclusion,$scope.showConclusions=!0,nextAnswer=pass?"1":"2",console.log($scope.conclusion),console.log(nextAnswer);var breadcrumb={};breadcrumb.sequence=$scope.sequence,breadcrumb.questionId=$scope.content.questionId,breadcrumb.question=$scope.content.question,breadcrumb.summary=$scope.content.summary,breadcrumb.type=$scope.content.type,$scope.breadcrumbs.push(breadcrumb),$scope.resetShows(),$scope.content.response=nextAnswer,console.log($scope.content.response)})})},$scope.update=function(thisBreadcrumb){var response=thisBreadcrumb.saved;console.log(response),response.$update(function(result){angular.forEach($scope.breadcrumbs,function(breadcrumb,key){breadcrumb.sequence===result.sequence&&($scope.breadcrumbs[key].saved=result)})},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.code="Demonstrate two-way da binding",$scope.items=["The quick brown fox jumps over the lazy dog 1","The quick brown fox jumps over the lazy dog 2"],$scope.greeting="Hello, World!",$scope.genReport=function(greeting){$scope.html='<!DOCTYPE html><html lang="en" xmlns="http://www.w3.org/1999/xhtml"><head><title>GAAP Logic - Project Report</title><!-- General META --><meta charset="utf-8"><meta http-equiv="Content-type" content="text/html;charset=UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1"><meta name="apple-mobile-web-app-capable" content="yes"><meta name="apple-mobile-web-app-status-bar-style" content="black"><!-- Semantic META --><meta name="keywords" content=""><meta name="description" content=""><!-- Facebook META --><meta property="fb:app_id" content="APP_ID"><meta property="og:site_name" content="GAAP Logic - Project Report"><meta property="og:title" content="GAAP Logic - Project Report"><meta property="og:description" content=""><meta property="og:url" content="http://localhost:3000/"><meta property="og:image" content="/img/brand/logo.png"><meta property="og:type" content="website"><!-- Twitter META --><meta name="twitter:title" content="GAAP Logic - Development Environment"><meta name="twitter:description" content=""><meta name="twitter:url" content="http://localhost:3000/"><meta name="twitter:image" content="/img/brand/logo.png"><!-- Fav Icon --><link href="/modules/core/img/brand/favicon.ico" rel="shortcut icon" type="image/x-icon"><!--Application CSS Files--><link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css"><link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap-theme.min.css"><!-- HTML5 Shim --><!--[if lt IE 9]><script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script><![endif]--></head>',$scope.html+="<div><h3>Project Title: "+$scope.project.title+"</h4><h4>Project ID: "+$scope.project._id+"</h4><h4>Project Description: "+$scope.project.description+"</h4><h4>Created on: "+$scope.project.created+"</h4><h4>Created by: "+$scope.project.user.displayName+"</h4></div>",angular.forEach($scope.breadcrumbs,function(breadcrumb,key){console.log(breadcrumb);var comment;"q"===breadcrumb.type&&"undefined"!=typeof breadcrumb.saved?(comment=""===breadcrumb.comment||"undefined"==typeof breadcrumb.comment?"none":breadcrumb.comment,$scope.html+="<div><h5><strong>Question (Node #"+breadcrumb.sequence+"): </strong>"+breadcrumb.question+"</h5><ul><li><strong>Question summary: </strong>"+breadcrumb.summary+"</li><li><strong>Response: </strong>"+breadcrumb.saved.answer.responseValue+"</li><li><strong>Comments: </strong>"+comment+"</li></ul></div>"):"d"===breadcrumb.type&&"undefined"!=typeof breadcrumb.saved?(comment=""===breadcrumb.comment||"undefined"==typeof breadcrumb.comment?"none":breadcrumb.comment,$scope.html+="<div><h5><strong>Intermediate conclusion (Node #"+breadcrumb.sequence+")<ul><li><strong>Question summary: </strong>"+breadcrumb.summary+"</li><li><strong>Response: </strong>"+breadcrumb.saved.answer.conclusionValue+"</li><li><strong>Comments: </strong>"+comment+"</li></ul></div>"):"r"===breadcrumb.type&&(comment=""===breadcrumb.comment||"undefined"==typeof breadcrumb.comment?"none":breadcrumb.comment,$scope.html+='<div><div style="border: solid lightblue 1px; padding: 5px;"><h4><strong>Accounting recommendation (Node #'+breadcrumb.sequence+"): </strong>"+breadcrumb.question+"</h4><li><strong>Comments: </strong>"+comment+"</li></div><br /></div>")}),console.log($scope.html),$scope.newWindow=$window.open("","_blank"),console.log($scope.newWindow),angular.element($scope.newWindow.document.body).append($scope.html),$scope.newWindow.print()},$scope.open=function(value){$scope.items=$scope.conclusions,console.log(value);var modalInstance=$modal.open({templateUrl:"myModalContent.html",controller:"ModalInstanceCtrl",resolve:{items:function(){return $scope.items}}});modalInstance.result.then(function(selectedItem){$scope.selected=selectedItem},function(){$log.info("Modal dismissed at: "+new Date)})},$scope.getContent=function(questionId){$scope.content=Questions.get({questionId:questionId})},$scope["continue"]=function(){$scope.nextQuestion("1"),$scope.showContinueButton=!1}}]),angular.module("responses").directive("newWindow",["$window","$compile",function($window,$compile){return{restrict:"EA",link:function($scope,$element,attr){$element.on("$destroy",function(){$scope.window.close()})},controller:["$scope","$element",function($scope,$element){$scope.window=$window.open("","_blank"),angular.element($scope.window.document.body).append($compile($element.contents())($scope))}]}}]),angular.module("responses").controller("ModalInstanceCtrl",["$scope","$modalInstance","items",function($scope,$modalInstance,items){$scope.items=items,$scope.selected={item:$scope.items[0]},$scope.ok=function(){$modalInstance.close($scope.selected.item)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("responses").factory("Responses",["$resource",function($resource){return $resource("responses/:responseId",{responseId:"@_id"},{update:{method:"PUT"}})}]),angular.module("subjects").run(["Menus",function(Menus){}]),angular.module("subjects").config(["$stateProvider",function($stateProvider){$stateProvider.state("listSubjects",{url:"/subjects",templateUrl:"modules/subjects/views/list-subjects.client.view.html"}).state("createSubject",{url:"/subjects/create",templateUrl:"modules/subjects/views/create-subject.client.view.html"}).state("viewSubject",{url:"/subjects/:subjectId",templateUrl:"modules/subjects/views/view-subject.client.view.html"}).state("editSubject",{url:"/subjects/:subjectId/edit",templateUrl:"modules/subjects/views/edit-subject.client.view.html"})}]),angular.module("subjects").controller("SubjectsController",["$scope","$stateParams","$location","$filter","Authentication","Subjects",function($scope,$stateParams,$location,$filter,Authentication,Subjects){$scope.authentication=Authentication;var orderBy=$filter("orderBy");$scope.order=function(array,predicate,reverse){var sorted=orderBy(array,predicate,reverse);return sorted},$scope.create=function(){var subject=new Subjects({name:this.name,description:this.description,subjectType:this.subjectType,subjectCode:this.subjectCode,subjectStartNode:this.subjectStartNode,status:this.status,testStatus:this.testStatus,prefix:this.prefix});subject.$save(function(response){$location.path("subjects"),$scope.name="",$scope.description="",$scope.subjectType="",$scope.subjectCode="",$scope.subjectStartNode="",$scope.status="",$scope.testStatus="",$scope.prefix=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(subject){if(subject){subject.$remove();for(var i in $scope.subjects)$scope.subjects[i]===subject&&$scope.subjects.splice(i,1)}else $scope.subject.$remove(function(){$location.path("subjects")})},$scope.update=function(){var subject=$scope.subject;subject.user=$scope.authentication.user._id,subject.$update(function(){$location.path("subjects")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){Subjects.query(function(subjects){subjects=$scope.order(subjects,"-name",!0),$scope.subjects=subjects})},$scope.findOne=function(){$scope.admin=!1,console.log($scope.authentication),angular.forEach($scope.authentication.user.roles,function(role,key){console.log(role),"admin"===role&&($scope.admin=!0)}),console.log($scope.admin),Subjects.get({subjectId:$stateParams.subjectId}).$promise.then(function(subject){$scope.subject=subject,$scope.subject.editable=$scope.admin||$scope.authentication.user._id===subject.user._id?!0:!1})}}]),angular.module("subjects").factory("Subjects",["$resource",function($resource){return $resource("subjects/:subjectId",{subjectId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication","vcRecaptchaService",function($scope,$http,$location,Authentication,vcRecaptchaService){$scope.authentication=Authentication,$scope.response=null,$scope.widgetId=null,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){console.log("signup started"),$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]),angular.module("versions").run(["Menus",function(Menus){}]),angular.module("versions").config(["$stateProvider",function($stateProvider){$stateProvider.state("listVersions",{url:"/versions",templateUrl:"modules/versions/views/list-versions.client.view.html"}).state("createVersion",{url:"/versions/create",templateUrl:"modules/versions/views/create-version.client.view.html"}).state("viewVersion",{url:"/versions/:versionId",templateUrl:"modules/versions/views/view-version.client.view.html"}).state("editVersion",{url:"/versions/:versionId/edit",templateUrl:"modules/versions/views/edit-version.client.view.html"}).state("testVersion",{url:"/versions/:versionId/test",templateUrl:"modules/versions/views/test-version.client.view.html"})}]),angular.module("versions").controller("VersionsController",["$scope","$stateParams","$location","$filter","Authentication","Versions","Subjects","$q",function($scope,$stateParams,$location,$filter,Authentication,Versions,Subjects,$q){$scope.authentication=Authentication;var orderBy=$filter("orderBy");$scope.order=function(array,predicate,reverse){var sorted=orderBy(array,predicate,reverse);return sorted},$scope.getSubjects=function(){var subjectsObj={};Subjects.query(function(subjects){$scope.subjectsMaster=subjects,subjects=$scope.order(subjects,"-name",!0),angular.forEach(subjects,function(subject,key){"active"===subject.status&&(subjectsObj[subject.name]=subject.subjectCode)}),$scope.subjects=subjectsObj,console.log($scope.subjects)})},$scope.create=function(){console.log(this.versionJson),console.log(this.subject);var description,code,thisSubject=this.subject,thisVersionId=this.versionId;angular.forEach($scope.subjectsMaster,function(subject,key){thisSubject===subject.subjectCode&&(description=subject.name+" v"+thisVersionId,code=subject.prefix+"."+thisVersionId)});var version=new Versions({subject:this.subject,description:description,versionId:this.versionId,effective:this.effective,status:this.status,versionCode:code,versionJson:angular.fromJson(this.versionJson)});version.$save(function(response){$location.path("versions"),$scope.subject="",$scope.description="",$scope.versionId="",$scope.effective="",$scope.status="",$scope.versionCode="",$scope.versionJson=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(version){if(version){version.$remove();for(var i in $scope.versions)$scope.versions[i]===version&&$scope.versions.splice(i,1)}else $scope.version.$remove(function(){$location.path("versions")})},$scope.update=function(){console.log($scope.version.versionJson),console.log(angular.fromJson($scope.version.versionJson));var version=$scope.version;console.log(version);var description,code;angular.forEach($scope.subjectsMaster,function(subject,key){version.subject===subject.subjectCode&&(description=subject.name+" v"+version.versionId,code=subject.prefix+"."+version.versionId)}),version.versionJson=angular.fromJson($scope.version.versionJson),version.versionCode=code,version.description=description,version.$update(function(){$location.path("versions")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){Versions.query(function(versions){versions=$scope.order(versions,"-name",!0),$scope.versions=versions})},$scope.findOne=function(){Versions.get({versionId:$stateParams.versionId}).$promise.then(function(version){version.versionJson=angular.toJson(version.versionJson),$scope.version=version,console.log($scope.version),$scope.getSubjects()})},$scope.test=function(){var jsonString=$scope.version;console.log(jsonString),$scope.versionJson=angular.fromJson($scope.version.versionJson),$scope.initVisited(),$scope.buildObject();var result=$scope.getNode($scope.versionJson[0].nodeId);result.then(function(){console.log($scope.visited);var notVisted=0;angular.forEach($scope.visited,function(value,key){0===value&&notVisted++}),console.log(notVisted)})},$scope.buildObject=function(){$scope.object={},angular.forEach($scope.versionJson,function(node,key){$scope.object[node.nodeId]={t1:node.target_1,t2:node.target_2,t3:node.target_3}}),console.log($scope.object)},$scope.initVisited=function(){$scope.visited={},angular.forEach($scope.versionJson,function(node,key){$scope.visited[node.nodeId]=0}),console.log($scope.visited)},$scope.getNode=function(target,deferred){if(console.log(deferred),"undefined"==typeof deferred)var deferred=$q.defer();if(angular.isObject($scope.object[target])&&1!==$scope.visited[target])$scope.visited[target]=1,angular.forEach($scope.object[target],function(t,k){if(""!==t){var def=$q.defer();$scope.getNode(t,def)}});else if(1!==$scope.visited[target])return $scope.visited[target]=1,deferred.resolve(),deferred.promise;return deferred.resolve(),deferred.promise}}]),angular.module("versions").factory("Versions",["$resource",function($resource){return $resource("versions/:versionId",{versionId:"@_id"},{update:{method:"PUT"}})}]);